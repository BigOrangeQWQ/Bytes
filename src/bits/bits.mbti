package "BigOrangeQWQ/Bits/bits"

// Values
fn bit(UInt64, Int) -> Bool

fn bit_at(Array[UInt64], Int, Int) -> Bool

fn count_01_pairs(UInt64, UInt64) -> (Int, UInt64)

fn count_10_pairs(UInt64, UInt64) -> (Int, UInt64)

fn count_11_pairs(UInt64) -> Int

fn count_11_pairs_with_carry(UInt64, UInt64) -> (Int, UInt64)

fn extract_01_pairs(UInt64, UInt64) -> UInt64

fn extract_10_pairs(UInt64, UInt64) -> UInt64

fn leading_one(UInt64) -> UInt

fn popcnt(UInt64) -> UInt64

fn read_bits(Array[UInt64], Int, Int, Int) -> UInt64

fn read_unary(Array[UInt64], Int, Int) -> UInt

fn reverse(UInt64) -> UInt64

fn select_nth_one(UInt64, Int) -> Int

fn trailing_zeros(UInt64) -> UInt

fn write_bits(Array[UInt64], Int, UInt64, Int, Int) -> Unit

// Types and methods

// Type aliases

// Traits

